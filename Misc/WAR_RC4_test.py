def hexdump(src, length=16):
    FILTER = ''.join([(len(repr(chr(x))) == 3) and chr(x) or '.' for x in range(256)])
    lines = []
    for c in xrange(0, len(src), length):
        chars = src[c:c+length]
        hex = ' '.join(["%02x" % ord(x) for x in chars])
        printable = ''.join(["%s" % ((ord(x) <= 127 and FILTER[ord(x)]) or '.') for x in chars])
        lines.append("%04x  %-*s  %s\n" % (c, length*3, hex, printable))
    return ''.join(lines)

def WAR_RC4(data, key, encrypt = True):
    j = 0
    i = 0
    out_first_half = []
    out_second_half = []
    half_len = (len(data) / 2)
    S = []
    for val in key:
        S.append(ord(val))
    for char in data[half_len:]:
        i = (i + 1) % 256
        j = (j + S[i]) % 256
        S[i] , S[j] = S[j] , S[i]
        c = ord(char) ^ S[(S[i] + S[j]) % 256]
        out_second_half.append(chr(c))
        if encrypt == True:
            j = (j + ord(char)) % 256
        else:
            j = (j + c) % 256
    for char in data[:half_len]:
        i = (i + 1) % 256
        j = (j + S[i]) % 256
        S[i] , S[j] = S[j] , S[i]
        c = ord(char) ^ S[(S[i] + S[j]) % 256]
        out_first_half.append(chr(c))
        if encrypt == True:
            j = (j + ord(char)) % 256
        else:
            j = (j + c) % 256
    return ''.join(out_first_half) + ''.join(out_second_half)

cdata = [
	0xE3, 0xF8, 0xD3, 0x6B, 0x36, 0xAF, 0x14, 0x38, 0xBD, 0xB8, 0x76, 0x4F,
	0x0E, 0x43, 0x59, 0x01, 0xC5, 0x7B, 0x8C, 0x60, 0xA0, 0x70, 0xFC, 0x22,
	0x8B, 0x44, 0x3D, 0x37, 0x01, 0x3D, 0xE8, 0x81, 0x70, 0xF0, 0x85, 0xCA,
	0x12, 0xAE, 0x42, 0x1C, 0x6A, 0x78, 0x47, 0xA0, 0x2D, 0x76, 0x12, 0x5F,
	0x83, 0xBD, 0x68, 0x8B, 0x3C, 0x3B, 0x98, 0xA1, 0x35, 0xED, 0x4F, 0xE7,
	0x02, 0x20, 0xF9, 0xCF, 0xDC, 0x16, 0x4D, 0x46, 0x84, 0x78, 0x08, 0xC9,
	0xEB, 0x39, 0x9D, 0xA4, 0x30, 0x45, 0x14, 0xF1, 0xCF, 0xEA, 0xC4, 0x29,
	0xE9, 0x63, 0x6A, 0xD9, 0xF1, 0x68, 0x17, 0xBB, 0xFD, 0x40, 0x98, 0xEA,
	0xD8, 0xF2, 0xD1, 0x44, 0xEF, 0xCE, 0xB0, 0xF9, 0x41, 0x37, 0xDA, 0x5E,
	0x12, 0x03, 0x97, 0xE7, 0xEA, 0xE5, 0x10, 0x90, 0xA1, 0x82, 0xDE, 0x2D,
	0x59, 0xD1, 0x1D, 0x85, 0x63, 0x38, 0xDB, 0x06, 0x4C, 0x31, 0xFE, 0xA3,
	0x3B, 0xD0, 0xF1, 0xF7, 0x17, 0x54, 0xD3, 0x7F, 0x5F, 0xBC, 0x5F, 0xD6,
	0x60, 0xC9
]

ckey = [
	0x4D, 0x4A, 0x3A, 0x1C, 0xB6, 0x21, 0x59, 0x33, 0xA6, 0xF4, 0x51, 0xF6,
	0xFB, 0xCC, 0x29, 0x53, 0x46, 0x3B, 0xC1, 0xA7, 0x03, 0xAD, 0xFD, 0xCF,
	0x78, 0x87, 0x45, 0x1F, 0x6D, 0x9D, 0x3F, 0x42, 0x3C, 0x49, 0x58, 0x27,
	0x3E, 0xB0, 0x4C, 0x64, 0x47, 0x2C, 0x8D, 0x69, 0xD8, 0x07, 0x81, 0x79,
	0xE9, 0x6E, 0xC7, 0xFE, 0x89, 0xC6, 0x31, 0xBD, 0xE6, 0xDD, 0xB8, 0xB5,
	0x90, 0x68, 0x40, 0xC5, 0x9A, 0x98, 0xA4, 0xEA, 0x67, 0x48, 0xCB, 0x6F,
	0x96, 0xA9, 0x7D, 0x73, 0x00, 0x7B, 0xB3, 0xE1, 0xDA, 0x20, 0xFC, 0xE5,
	0x60, 0x2A, 0xB4, 0xF8, 0xF5, 0xF1, 0x86, 0x55, 0x1D, 0x6A, 0x37, 0xE0,
	0xD5, 0x8F, 0x8B, 0xF2, 0x01, 0xAE, 0xDF, 0x3D, 0x57, 0xBA, 0x30, 0xE7,
	0x63, 0x13, 0x05, 0x5B, 0x93, 0x99, 0x6C, 0x54, 0xD3, 0xA5, 0x9E, 0xF9,
	0xB9, 0x8A, 0xC3, 0x17, 0x8E, 0x2F, 0x61, 0x12, 0x85, 0x16, 0x0B, 0x08,
	0xE3, 0x9B, 0x36, 0x5A, 0x5E, 0xBC, 0xEF, 0xDC, 0x74, 0x50, 0x95, 0x7F,
	0xAA, 0x8C, 0xD7, 0x2E, 0x0F, 0x4E, 0x0C, 0x0A, 0xA8, 0x5D, 0xF0, 0x62,
	0xAB, 0x4F, 0xD1, 0xE4, 0x26, 0xC0, 0x77, 0x0D, 0x9C, 0x0E, 0xD6, 0xB2,
	0x02, 0x71, 0xDE, 0xA0, 0x28, 0x1B, 0x09, 0x84, 0x52, 0x11, 0xD2, 0x70,
	0x72, 0x56, 0x80, 0xD9, 0x7A, 0x94, 0xBB, 0xC2, 0x41, 0x44, 0x14, 0xA3,
	0x91, 0xAC, 0x24, 0x66, 0x4B, 0x32, 0x97, 0x39, 0x88, 0x43, 0xE8, 0xB1,
	0xAF, 0xE2, 0xEB, 0xED, 0x65, 0x7C, 0xB7, 0x9F, 0x34, 0xCE, 0xFA, 0xCA,
	0xA1, 0x1E, 0xEC, 0xD0, 0x83, 0xBE, 0x76, 0x35, 0x10, 0xCD, 0x7E, 0xD4,
	0x18, 0x04, 0x92, 0xDB, 0x2B, 0xEE, 0x5F, 0xF3, 0x82, 0xFF, 0xA2, 0xF7,
	0x19, 0x06, 0x23, 0xC4, 0x2D, 0x75, 0x22, 0x5C, 0x6B, 0x38, 0xC9, 0x1A,
	0xC8, 0x25, 0xBF, 0x15
]

key = ''.join([chr(c) for c in ckey])
data = ''.join([chr(c) for c in cdata])

#print hexdump(WAR_RC4(data, key))

a = WAR_RC4(data, key, False)
print hexdump(a)
b = WAR_RC4(a, key, True)
print hexdump(b)
res = WAR_RC4(b, key, False)
print hexdump(res)
